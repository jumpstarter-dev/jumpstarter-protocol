// Copyright 2024 The Jumpstarter Authors

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: jumpstarter/v1/jumpstarter.proto

package jumpstarterv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Controller_Register_FullMethodName    = "/jumpstarter.v1.Controller/Register"
	Controller_Bye_FullMethodName         = "/jumpstarter.v1.Controller/Bye"
	Controller_AuditStream_FullMethodName = "/jumpstarter.v1.Controller/AuditStream"
)

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A service where a exporter can connect to make itself available
type ControllerClient interface {
	// Exporter registration
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Exporter disconnection
	// Disconnecting with bye will invalidate any existing router tokens
	// we will eventually have a mechanism to tell the router this token
	// has been invalidated
	Bye(ctx context.Context, in *ByeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Audit events from the exporters
	// audit events are used to track the exporter's activity
	AuditStream(ctx context.Context, opts ...grpc.CallOption) (Controller_AuditStreamClient, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Controller_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Bye(ctx context.Context, in *ByeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Controller_Bye_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AuditStream(ctx context.Context, opts ...grpc.CallOption) (Controller_AuditStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[0], Controller_AuditStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &controllerAuditStreamClient{ClientStream: stream}
	return x, nil
}

type Controller_AuditStreamClient interface {
	Send(*AuditEvent) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type controllerAuditStreamClient struct {
	grpc.ClientStream
}

func (x *controllerAuditStreamClient) Send(m *AuditEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerAuditStreamClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
//
// A service where a exporter can connect to make itself available
type ControllerServer interface {
	// Exporter registration
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Exporter disconnection
	// Disconnecting with bye will invalidate any existing router tokens
	// we will eventually have a mechanism to tell the router this token
	// has been invalidated
	Bye(context.Context, *ByeRequest) (*emptypb.Empty, error)
	// Audit events from the exporters
	// audit events are used to track the exporter's activity
	AuditStream(Controller_AuditStreamServer) error
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedControllerServer) Bye(context.Context, *ByeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bye not implemented")
}
func (UnimplementedControllerServer) AuditStream(Controller_AuditStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AuditStream not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Bye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Bye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_Bye_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Bye(ctx, req.(*ByeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AuditStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).AuditStream(&controllerAuditStreamServer{ServerStream: stream})
}

type Controller_AuditStreamServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*AuditEvent, error)
	grpc.ServerStream
}

type controllerAuditStreamServer struct {
	grpc.ServerStream
}

func (x *controllerAuditStreamServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerAuditStreamServer) Recv() (*AuditEvent, error) {
	m := new(AuditEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jumpstarter.v1.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Controller_Register_Handler,
		},
		{
			MethodName: "Bye",
			Handler:    _Controller_Bye_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AuditStream",
			Handler:       _Controller_AuditStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "jumpstarter/v1/jumpstarter.proto",
}

const (
	Exporter_GetReport_FullMethodName           = "/jumpstarter.v1.Exporter/GetReport"
	Exporter_DriverCall_FullMethodName          = "/jumpstarter.v1.Exporter/DriverCall"
	Exporter_StreamingDriverCall_FullMethodName = "/jumpstarter.v1.Exporter/StreamingDriverCall"
	Exporter_LogStream_FullMethodName           = "/jumpstarter.v1.Exporter/LogStream"
)

// ExporterClient is the client API for Exporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A service a exporter can share locally to be used without a server
// Channel/Call credentials are used to authenticate the client, and routing to the right exporter
type ExporterClient interface {
	// Exporter registration
	GetReport(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetReportResponse, error)
	DriverCall(ctx context.Context, in *DriverCallRequest, opts ...grpc.CallOption) (*DriverCallResponse, error)
	StreamingDriverCall(ctx context.Context, in *DriverCallRequest, opts ...grpc.CallOption) (Exporter_StreamingDriverCallClient, error)
	LogStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Exporter_LogStreamClient, error)
}

type exporterClient struct {
	cc grpc.ClientConnInterface
}

func NewExporterClient(cc grpc.ClientConnInterface) ExporterClient {
	return &exporterClient{cc}
}

func (c *exporterClient) GetReport(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportResponse)
	err := c.cc.Invoke(ctx, Exporter_GetReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exporterClient) DriverCall(ctx context.Context, in *DriverCallRequest, opts ...grpc.CallOption) (*DriverCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverCallResponse)
	err := c.cc.Invoke(ctx, Exporter_DriverCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exporterClient) StreamingDriverCall(ctx context.Context, in *DriverCallRequest, opts ...grpc.CallOption) (Exporter_StreamingDriverCallClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Exporter_ServiceDesc.Streams[0], Exporter_StreamingDriverCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &exporterStreamingDriverCallClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exporter_StreamingDriverCallClient interface {
	Recv() (*DriverCallResponse, error)
	grpc.ClientStream
}

type exporterStreamingDriverCallClient struct {
	grpc.ClientStream
}

func (x *exporterStreamingDriverCallClient) Recv() (*DriverCallResponse, error) {
	m := new(DriverCallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exporterClient) LogStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Exporter_LogStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Exporter_ServiceDesc.Streams[1], Exporter_LogStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &exporterLogStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exporter_LogStreamClient interface {
	Recv() (*LogStreamResponse, error)
	grpc.ClientStream
}

type exporterLogStreamClient struct {
	grpc.ClientStream
}

func (x *exporterLogStreamClient) Recv() (*LogStreamResponse, error) {
	m := new(LogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExporterServer is the server API for Exporter service.
// All implementations must embed UnimplementedExporterServer
// for forward compatibility
//
// A service a exporter can share locally to be used without a server
// Channel/Call credentials are used to authenticate the client, and routing to the right exporter
type ExporterServer interface {
	// Exporter registration
	GetReport(context.Context, *emptypb.Empty) (*GetReportResponse, error)
	DriverCall(context.Context, *DriverCallRequest) (*DriverCallResponse, error)
	StreamingDriverCall(*DriverCallRequest, Exporter_StreamingDriverCallServer) error
	LogStream(*emptypb.Empty, Exporter_LogStreamServer) error
	mustEmbedUnimplementedExporterServer()
}

// UnimplementedExporterServer must be embedded to have forward compatible implementations.
type UnimplementedExporterServer struct {
}

func (UnimplementedExporterServer) GetReport(context.Context, *emptypb.Empty) (*GetReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedExporterServer) DriverCall(context.Context, *DriverCallRequest) (*DriverCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverCall not implemented")
}
func (UnimplementedExporterServer) StreamingDriverCall(*DriverCallRequest, Exporter_StreamingDriverCallServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingDriverCall not implemented")
}
func (UnimplementedExporterServer) LogStream(*emptypb.Empty, Exporter_LogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LogStream not implemented")
}
func (UnimplementedExporterServer) mustEmbedUnimplementedExporterServer() {}

// UnsafeExporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExporterServer will
// result in compilation errors.
type UnsafeExporterServer interface {
	mustEmbedUnimplementedExporterServer()
}

func RegisterExporterServer(s grpc.ServiceRegistrar, srv ExporterServer) {
	s.RegisterService(&Exporter_ServiceDesc, srv)
}

func _Exporter_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exporter_GetReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServer).GetReport(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exporter_DriverCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServer).DriverCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exporter_DriverCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServer).DriverCall(ctx, req.(*DriverCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exporter_StreamingDriverCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DriverCallRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExporterServer).StreamingDriverCall(m, &exporterStreamingDriverCallServer{ServerStream: stream})
}

type Exporter_StreamingDriverCallServer interface {
	Send(*DriverCallResponse) error
	grpc.ServerStream
}

type exporterStreamingDriverCallServer struct {
	grpc.ServerStream
}

func (x *exporterStreamingDriverCallServer) Send(m *DriverCallResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Exporter_LogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExporterServer).LogStream(m, &exporterLogStreamServer{ServerStream: stream})
}

type Exporter_LogStreamServer interface {
	Send(*LogStreamResponse) error
	grpc.ServerStream
}

type exporterLogStreamServer struct {
	grpc.ServerStream
}

func (x *exporterLogStreamServer) Send(m *LogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Exporter_ServiceDesc is the grpc.ServiceDesc for Exporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jumpstarter.v1.Exporter",
	HandlerType: (*ExporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReport",
			Handler:    _Exporter_GetReport_Handler,
		},
		{
			MethodName: "DriverCall",
			Handler:    _Exporter_DriverCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingDriverCall",
			Handler:       _Exporter_StreamingDriverCall_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LogStream",
			Handler:       _Exporter_LogStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jumpstarter/v1/jumpstarter.proto",
}
