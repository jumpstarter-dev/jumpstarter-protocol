// Copyright 2024 The Jumpstarter Authors

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: jumpstarter/v1/rendezvous.proto

package jumpstarterv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RendezvousService_Listen_FullMethodName = "/jumpstarter.v1.RendezvousService/Listen"
	RendezvousService_Dial_FullMethodName   = "/jumpstarter.v1.RendezvousService/Dial"
	RendezvousService_Stream_FullMethodName = "/jumpstarter.v1.RendezvousService/Stream"
)

// RendezvousServiceClient is the client API for RendezvousService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RendezvousServiceClient interface {
	// Listen announces the availability of address
	// and returns new stream ids for accepting incoming connections
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (RendezvousService_ListenClient, error)
	// Dial returns a new stream id for connecting to address
	Dial(ctx context.Context, in *DialRequest, opts ...grpc.CallOption) (*DialResponse, error)
	// Stream connects caller to another caller with the same stream id
	// stream id is returned in ListenResponse and DialResponse
	// and should be provided as RPC Metadata "stream"
	Stream(ctx context.Context, opts ...grpc.CallOption) (RendezvousService_StreamClient, error)
}

type rendezvousServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRendezvousServiceClient(cc grpc.ClientConnInterface) RendezvousServiceClient {
	return &rendezvousServiceClient{cc}
}

func (c *rendezvousServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (RendezvousService_ListenClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RendezvousService_ServiceDesc.Streams[0], RendezvousService_Listen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &rendezvousServiceListenClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RendezvousService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type rendezvousServiceListenClient struct {
	grpc.ClientStream
}

func (x *rendezvousServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rendezvousServiceClient) Dial(ctx context.Context, in *DialRequest, opts ...grpc.CallOption) (*DialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DialResponse)
	err := c.cc.Invoke(ctx, RendezvousService_Dial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rendezvousServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (RendezvousService_StreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RendezvousService_ServiceDesc.Streams[1], RendezvousService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &rendezvousServiceStreamClient{ClientStream: stream}
	return x, nil
}

type RendezvousService_StreamClient interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ClientStream
}

type rendezvousServiceStreamClient struct {
	grpc.ClientStream
}

func (x *rendezvousServiceStreamClient) Send(m *Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rendezvousServiceStreamClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RendezvousServiceServer is the server API for RendezvousService service.
// All implementations must embed UnimplementedRendezvousServiceServer
// for forward compatibility
type RendezvousServiceServer interface {
	// Listen announces the availability of address
	// and returns new stream ids for accepting incoming connections
	Listen(*ListenRequest, RendezvousService_ListenServer) error
	// Dial returns a new stream id for connecting to address
	Dial(context.Context, *DialRequest) (*DialResponse, error)
	// Stream connects caller to another caller with the same stream id
	// stream id is returned in ListenResponse and DialResponse
	// and should be provided as RPC Metadata "stream"
	Stream(RendezvousService_StreamServer) error
	mustEmbedUnimplementedRendezvousServiceServer()
}

// UnimplementedRendezvousServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRendezvousServiceServer struct {
}

func (UnimplementedRendezvousServiceServer) Listen(*ListenRequest, RendezvousService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedRendezvousServiceServer) Dial(context.Context, *DialRequest) (*DialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dial not implemented")
}
func (UnimplementedRendezvousServiceServer) Stream(RendezvousService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedRendezvousServiceServer) mustEmbedUnimplementedRendezvousServiceServer() {}

// UnsafeRendezvousServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RendezvousServiceServer will
// result in compilation errors.
type UnsafeRendezvousServiceServer interface {
	mustEmbedUnimplementedRendezvousServiceServer()
}

func RegisterRendezvousServiceServer(s grpc.ServiceRegistrar, srv RendezvousServiceServer) {
	s.RegisterService(&RendezvousService_ServiceDesc, srv)
}

func _RendezvousService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RendezvousServiceServer).Listen(m, &rendezvousServiceListenServer{ServerStream: stream})
}

type RendezvousService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type rendezvousServiceListenServer struct {
	grpc.ServerStream
}

func (x *rendezvousServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RendezvousService_Dial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendezvousServiceServer).Dial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RendezvousService_Dial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendezvousServiceServer).Dial(ctx, req.(*DialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RendezvousService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RendezvousServiceServer).Stream(&rendezvousServiceStreamServer{ServerStream: stream})
}

type RendezvousService_StreamServer interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ServerStream
}

type rendezvousServiceStreamServer struct {
	grpc.ServerStream
}

func (x *rendezvousServiceStreamServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rendezvousServiceStreamServer) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RendezvousService_ServiceDesc is the grpc.ServiceDesc for RendezvousService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RendezvousService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jumpstarter.v1.RendezvousService",
	HandlerType: (*RendezvousServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dial",
			Handler:    _RendezvousService_Dial_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _RendezvousService_Listen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stream",
			Handler:       _RendezvousService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jumpstarter/v1/rendezvous.proto",
}
