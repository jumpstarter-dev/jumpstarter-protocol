# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from jumpstarter.v1 import rendezvous_pb2 as jumpstarter_dot_v1_dot_rendezvous__pb2


class RendezvousServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Listen = channel.unary_stream(
                '/jumpstarter.v1.RendezvousService/Listen',
                request_serializer=jumpstarter_dot_v1_dot_rendezvous__pb2.ListenRequest.SerializeToString,
                response_deserializer=jumpstarter_dot_v1_dot_rendezvous__pb2.ListenResponse.FromString,
                _registered_method=True)
        self.Dial = channel.unary_unary(
                '/jumpstarter.v1.RendezvousService/Dial',
                request_serializer=jumpstarter_dot_v1_dot_rendezvous__pb2.DialRequest.SerializeToString,
                response_deserializer=jumpstarter_dot_v1_dot_rendezvous__pb2.DialResponse.FromString,
                _registered_method=True)
        self.Stream = channel.stream_stream(
                '/jumpstarter.v1.RendezvousService/Stream',
                request_serializer=jumpstarter_dot_v1_dot_rendezvous__pb2.Frame.SerializeToString,
                response_deserializer=jumpstarter_dot_v1_dot_rendezvous__pb2.Frame.FromString,
                _registered_method=True)


class RendezvousServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Listen(self, request, context):
        """Listen announces the availability of address
        and returns new stream ids for accepting incoming connections
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Dial(self, request, context):
        """Dial returns a new stream id for connecting to address
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stream(self, request_iterator, context):
        """Stream connects caller to another caller with the same stream id
        stream id is returned in ListenResponse and DialResponse
        and should be provided as RPC Metadata "stream"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RendezvousServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Listen': grpc.unary_stream_rpc_method_handler(
                    servicer.Listen,
                    request_deserializer=jumpstarter_dot_v1_dot_rendezvous__pb2.ListenRequest.FromString,
                    response_serializer=jumpstarter_dot_v1_dot_rendezvous__pb2.ListenResponse.SerializeToString,
            ),
            'Dial': grpc.unary_unary_rpc_method_handler(
                    servicer.Dial,
                    request_deserializer=jumpstarter_dot_v1_dot_rendezvous__pb2.DialRequest.FromString,
                    response_serializer=jumpstarter_dot_v1_dot_rendezvous__pb2.DialResponse.SerializeToString,
            ),
            'Stream': grpc.stream_stream_rpc_method_handler(
                    servicer.Stream,
                    request_deserializer=jumpstarter_dot_v1_dot_rendezvous__pb2.Frame.FromString,
                    response_serializer=jumpstarter_dot_v1_dot_rendezvous__pb2.Frame.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jumpstarter.v1.RendezvousService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('jumpstarter.v1.RendezvousService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RendezvousService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Listen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/jumpstarter.v1.RendezvousService/Listen',
            jumpstarter_dot_v1_dot_rendezvous__pb2.ListenRequest.SerializeToString,
            jumpstarter_dot_v1_dot_rendezvous__pb2.ListenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Dial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jumpstarter.v1.RendezvousService/Dial',
            jumpstarter_dot_v1_dot_rendezvous__pb2.DialRequest.SerializeToString,
            jumpstarter_dot_v1_dot_rendezvous__pb2.DialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/jumpstarter.v1.RendezvousService/Stream',
            jumpstarter_dot_v1_dot_rendezvous__pb2.Frame.SerializeToString,
            jumpstarter_dot_v1_dot_rendezvous__pb2.Frame.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
