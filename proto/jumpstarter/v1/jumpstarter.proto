// Copyright 2024 The Jumpstarter Authors

syntax = "proto3";

package jumpstarter.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// A service where a exporter can connect to make itself available
service ControllerService {
  // Exporter registration
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Exporter disconnection
  // Disconnecting with bye will invalidate any existing router tokens
  // we will eventually have a mechanism to tell the router this token
  // has been invalidated
  rpc Bye(ByeRequest) returns (google.protobuf.Empty);

  // Exporter listening
  // Returns stream tokens for accepting incoming client connections
  rpc Listen(ListenRequest) returns (stream ListenResponse);

  // Client connecting
  // Returns stream token for connecting to the desired exporter
  // Leases are checked before token issuance
  rpc Dial(DialRequest) returns (DialResponse);

  // Audit events from the exporters
  // audit events are used to track the exporter's activity
  rpc AuditStream(stream AuditStreamRequest) returns (google.protobuf.Empty);
}

message RegisterRequest {
  // additional context:
  // - token/authentication mechanism
  string uuid = 1;
  map<string, string> labels = 2;
  // standard labels:
  // jumpstarter.dev/hostname=
  // jumpstarter.dev/name=
  repeated DeviceReport device_report = 3;
}

message DeviceReport {
  string device_uuid = 1; // a unique id within the expoter
  optional string parent_device_uuid = 2; // optional, if device has a parent device
  string driver_interface = 3; // The driver interface class
  map<string, string> labels = 4;
}

message RegisterResponse {}

message ByeRequest {
  // additional context:
  // - token/authentication mechanism
  string uuid = 1;
  string reason = 2;
}

message ListenRequest {}

message ListenResponse {
  string router_endpoint = 1;
  string router_token = 2;
}

message DialRequest {
  string uuid = 1;
}

message DialResponse {
  string router_endpoint = 1;
  string router_token = 2;
}

message AuditStreamRequest {
  // additional context:
  // - token/authentication mechanism
  string uuid = 1;
  string device_uuid = 2;
  string severity = 3;
  string message = 4;
}

// A service a exporter can share locally to be used without a server
// Channel/Call credentials are used to authenticate the client, and routing to the right exporter
service ExporterService {
  // Exporter registration
  rpc GetReport(google.protobuf.Empty) returns (GetReportResponse);
  rpc DriverCall(DriverCallRequest) returns (DriverCallResponse);
  rpc StreamingDriverCall(StreamingDriverCallRequest) returns (stream StreamingDriverCallResponse);
  rpc LogStream(google.protobuf.Empty) returns (stream LogStreamResponse);
}

message GetReportResponse {
  string uuid = 1;
  map<string, string> labels = 2;
  // standard labels:
  // jumpstarter.dev/hostname=
  // jumpstarter.dev/name=
  repeated DeviceReport device_report = 3;
}

message DriverCallRequest {
  string device_uuid = 1;
  string driver_method = 2;
  repeated google.protobuf.Value args = 3;
}

message DriverCallResponse {
  string call_uuid = 1;
  string json_result = 2;
}

message StreamingDriverCallRequest {
  string device_uuid = 1;
  string driver_method = 2;
  repeated google.protobuf.Value args = 3;
}

message StreamingDriverCallResponse {
  string call_uuid = 1;
  string json_result = 2;
}

message LogStreamResponse {
  string device_uuid = 1;
  string severity = 2;
  string message = 3;
}
